@page
@{
  ViewData["Title"] = "Турнир";
}

@using System.IO
@using Microsoft.AspNetCore.Hosting

@inject IWebHostEnvironment _env

@{

  int selectedRow = 0;
  if (Request.Query["row"].Count > 0)
  {
    int.TryParse(Request.Query["row"], out selectedRow);
  }

  int selectedPhase = 0;

  if (Request.Query["selectedPhase"].Count > 0)
  {
    int.TryParse(Request.Query["selectedPhase"], out selectedPhase);
  }

  selectedRow++;

  var filePath1 = System.IO.Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Database", @selectedPhase +
  "tournaments.txt");

  int i1 = 0;
  int i2 = 0;

  string currentTournamentNumber = "";

  using (StreamReader sr = new StreamReader(filePath1))
  {

    string tLine = null;

    for (int currentLine = 1; currentLine <= selectedRow; currentLine++)
    {
      tLine = sr.ReadLine();

      if (tLine == null)
      {
        Console.WriteLine("The file does not have enough lines.");
        break;
      }
    }

    if (tLine != null)
    {
      string[] sLine = tLine.Split(";");

      i1 = int.Parse(sLine[1]);
      i2 = int.Parse(sLine[2]);
      currentTournamentNumber = sLine[0];
    }

  }

  List<List<string>> tournaments = new List<List<string>>();

  var filePath2 = System.IO.Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Database", @selectedPhase +
  "matches.txt");

  using (StreamReader sr = new StreamReader(filePath2))
  {
    string line;
    while ((line = sr.ReadLine()) != null)
    {
      string[] tarr = line.Split(";");

      if (int.Parse(tarr[0]) < i1)
      {
        continue;
      }
      else if (int.Parse(tarr[0]) > i2)
      {
        break;
      }

      for (int i = 0; i < tarr.Length; i += 7)
      {
        List<string> sublist = new List<string>();

        for (int j = 0; j < 7 && i + j < tarr.Length; j++)
        {
          sublist.Add(tarr[i + j]);
        }

        tournaments.Add(sublist);
      }
    }
  }
}

<h2 class="table-label">Турнир @currentTournamentNumber<br>Фаза @selectedPhase</h2>

<table>
  <thead>
    <tr>
      <th>№</th>
      <th>Отбор 1</th>
      <th>Резултат</th>
      <th>Отбор 2</th>
    </tr>
  </thead>
  <tbody>

    @{
      int matchType = -1;

      for (int i = 0; i < tournaments.Count() && tournaments[i][0] != "0"; i++)
      {

        if (int.Parse(tournaments[i][5]) != matchType)
        {

          switch (int.Parse(tournaments[i][5]))
          {
            case 0:
              <tr>
                <td colspan="4" style="background-color:#3C4142;">Групи</td>
              </tr>
              matchType = 0;
              break;
            case 1:
              <tr>
                <td colspan="4" style="background-color:#3C4142;">Четвърт финали</td>
              </tr>
              matchType = 1;
              break;
            case 2:
              <tr>
                <td colspan="4" style="background-color:#3C4142;">Полу финали</td>
              </tr>
              matchType = 2;
              break;
            case 3:
              <tr>
                <td colspan="4" style="background-color:#3C4142;">3-то място</td>
              </tr>
              matchType = 3;
              break;
            case 4:
              <tr>
                <td colspan="4" style="background-color:#3C4142;">Финал</td>
              </tr>
              matchType = 4;
              break;
          }
        }

        <tr>

          <td>@tournaments[i][0]</td>
          <td>@tournaments[i][1]</td>
          <td>@tournaments[i][2] - @tournaments[i][3]</td>
          <td>@tournaments[i][4]</td>

        </tr>

      }
    }
  </tbody>
</table>

</tbody>
</table>
